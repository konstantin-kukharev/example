// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductComment Комментарий к товару
//
// swagger:model ProductComment
type ProductComment struct {

	// дата и время комментария в формате "2022-01-12 14:33:24"
	Date string `json:"date,omitempty"`

	// сообщение
	// Required: true
	Msg *string `json:"msg"`

	// own id
	// Required: true
	OwnID *int32 `json:"own_id"`

	// код товара
	// Required: true
	ProductSupCode *string `json:"product_sup_code"`

	// рейтинг
	// Maximum: 100
	// Minimum: 0
	Rating *int32 `json:"rating,omitempty"`

	// ид региона
	// Required: true
	// Enum: [52 77]
	RegionID *string `json:"region_id"`

	// review to
	ReviewTo int32 `json:"review_to,omitempty"`

	// application source: `app` - mobile application, `site` - site backend
	//
	// Enum: [app site]
	Source string `json:"source,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`
}

// Validate validates this product comment
func (m *ProductComment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSupCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductComment) validateMsg(formats strfmt.Registry) error {

	if err := validate.Required("msg", "body", m.Msg); err != nil {
		return err
	}

	return nil
}

func (m *ProductComment) validateOwnID(formats strfmt.Registry) error {

	if err := validate.Required("own_id", "body", m.OwnID); err != nil {
		return err
	}

	return nil
}

func (m *ProductComment) validateProductSupCode(formats strfmt.Registry) error {

	if err := validate.Required("product_sup_code", "body", m.ProductSupCode); err != nil {
		return err
	}

	return nil
}

func (m *ProductComment) validateRating(formats strfmt.Registry) error {
	if swag.IsZero(m.Rating) { // not required
		return nil
	}

	if err := validate.MinimumInt("rating", "body", int64(*m.Rating), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rating", "body", int64(*m.Rating), 100, false); err != nil {
		return err
	}

	return nil
}

var productCommentTypeRegionIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["52","77"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productCommentTypeRegionIDPropEnum = append(productCommentTypeRegionIDPropEnum, v)
	}
}

const (

	// ProductCommentRegionIDNr52 captures enum value "52"
	ProductCommentRegionIDNr52 string = "52"

	// ProductCommentRegionIDNr77 captures enum value "77"
	ProductCommentRegionIDNr77 string = "77"
)

// prop value enum
func (m *ProductComment) validateRegionIDEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productCommentTypeRegionIDPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductComment) validateRegionID(formats strfmt.Registry) error {

	if err := validate.Required("region_id", "body", m.RegionID); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegionIDEnum("region_id", "body", *m.RegionID); err != nil {
		return err
	}

	return nil
}

var productCommentTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["app","site"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productCommentTypeSourcePropEnum = append(productCommentTypeSourcePropEnum, v)
	}
}

const (

	// ProductCommentSourceApp captures enum value "app"
	ProductCommentSourceApp string = "app"

	// ProductCommentSourceSite captures enum value "site"
	ProductCommentSourceSite string = "site"
)

// prop value enum
func (m *ProductComment) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productCommentTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductComment) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product comment based on context it is used
func (m *ProductComment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductComment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductComment) UnmarshalBinary(b []byte) error {
	var res ProductComment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
