// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "sample",
    "title": "comment example",
    "contact": {
      "name": "kkukharev"
    },
    "license": {
      "name": "ISA"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/api",
  "paths": {
    "/comment": {
      "get": {
        "description": "Returns all comments from the system that the user has access to",
        "produces": [
          "application/json"
        ],
        "operationId": "findComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "maximum number of results to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "comment response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewComment"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new comment",
        "produces": [
          "application/json"
        ],
        "operationId": "addComment",
        "parameters": [
          {
            "description": "Comment to add to the store",
            "name": "comment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment response",
            "schema": {
              "$ref": "#/definitions/NewComment"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Comment": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewComment"
        }
      ]
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NewComment": {
      "type": "object",
      "required": [
        "own_id"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "own_id": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "sample",
    "title": "comment example",
    "contact": {
      "name": "kkukharev"
    },
    "license": {
      "name": "ISA"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/api",
  "paths": {
    "/comment": {
      "get": {
        "description": "Returns all comments from the system that the user has access to",
        "produces": [
          "application/json"
        ],
        "operationId": "findComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "maximum number of results to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "comment response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewComment"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new comment",
        "produces": [
          "application/json"
        ],
        "operationId": "addComment",
        "parameters": [
          {
            "description": "Comment to add to the store",
            "name": "comment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment response",
            "schema": {
              "$ref": "#/definitions/NewComment"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Comment": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewComment"
        }
      ]
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NewComment": {
      "type": "object",
      "required": [
        "own_id"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "own_id": {
          "type": "string"
        }
      }
    }
  }
}`))
}
