// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"esb/gen/models"
)

// FindCommentOKCode is the HTTP code returned for type FindCommentOK
const FindCommentOKCode int = 200

/*FindCommentOK comment response

swagger:response findCommentOK
*/
type FindCommentOK struct {

	/*
	  In: Body
	*/
	Payload []*models.NewComment `json:"body,omitempty"`
}

// NewFindCommentOK creates FindCommentOK with default headers values
func NewFindCommentOK() *FindCommentOK {

	return &FindCommentOK{}
}

// WithPayload adds the payload to the find comment o k response
func (o *FindCommentOK) WithPayload(payload []*models.NewComment) *FindCommentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find comment o k response
func (o *FindCommentOK) SetPayload(payload []*models.NewComment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindCommentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.NewComment, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*FindCommentDefault unexpected error

swagger:response findCommentDefault
*/
type FindCommentDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewFindCommentDefault creates FindCommentDefault with default headers values
func NewFindCommentDefault(code int) *FindCommentDefault {
	if code <= 0 {
		code = 500
	}

	return &FindCommentDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the find comment default response
func (o *FindCommentDefault) WithStatusCode(code int) *FindCommentDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the find comment default response
func (o *FindCommentDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the find comment default response
func (o *FindCommentDefault) WithPayload(payload *models.ErrorModel) *FindCommentDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find comment default response
func (o *FindCommentDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindCommentDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
