// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProductCommentAddHandlerFunc turns a function with the right signature into a product comment add handler
type ProductCommentAddHandlerFunc func(ProductCommentAddParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductCommentAddHandlerFunc) Handle(params ProductCommentAddParams) middleware.Responder {
	return fn(params)
}

// ProductCommentAddHandler interface for that can handle valid product comment add params
type ProductCommentAddHandler interface {
	Handle(ProductCommentAddParams) middleware.Responder
}

// NewProductCommentAdd creates a new http.Handler for the product comment add operation
func NewProductCommentAdd(ctx *middleware.Context, handler ProductCommentAddHandler) *ProductCommentAdd {
	return &ProductCommentAdd{Context: ctx, Handler: handler}
}

/* ProductCommentAdd swagger:route POST /product/comment product productCommentAdd

Добавление нового комментария к товару

*/
type ProductCommentAdd struct {
	Context *middleware.Context
	Handler ProductCommentAddHandler
}

func (o *ProductCommentAdd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProductCommentAddParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
